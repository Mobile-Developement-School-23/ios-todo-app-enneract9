//
//  TodoItem.swift
//  To-do-list
//
//  Created by @_@
//

import Foundation

struct TodoItem {
    
    let id: String
    let text: String
    let importance: Importance
    let deadline: Date?
    let isDone: Bool
    let dateOfCreation: Date
    let dateOfChange: Date?
    
    init(id: String = UUID().uuidString, text: String, importance: Importance, deadline: Date? = nil, isDone: Bool = false , dateOfChange: Date? = nil, dateOfCreation: Date = Date()) {
        self.id = id
        self.text = text
        self.importance = importance
        self.deadline = deadline
        self.isDone = isDone
        self.dateOfCreation = dateOfCreation
        self.dateOfChange = dateOfChange
    }
    
    init?(dict: [String:Any]) {
        
        guard let text = dict["text"] as? String, let timeIntervalOfCreation = dict["dateOfCreation"] as? TimeInterval else {
            return nil
        }
        
        self.id = dict["id"] as? String ?? UUID().uuidString
        self.text = text
        self.importance = Importance(rawValue: dict["importance"] as? String ?? "") ?? .usual
        self.isDone = dict["isDone"] as? Bool ?? false
        self.dateOfCreation =  Date(timeIntervalSince1970: timeIntervalOfCreation)
        
        if let timeIntervalOfChange = dict["dateOfChange"] as? TimeInterval {
            self.dateOfChange = Date(timeIntervalSince1970: timeIntervalOfChange)
        } else {
            self.dateOfChange = nil
        }
        
        if let timeIntervalDeadline = dict["deadline"] as? TimeInterval {
            self.deadline = Date(timeIntervalSince1970: timeIntervalDeadline)
        } else {
            self.deadline = nil
        }
    }
    
    enum Importance: String {
        case unimportant
        case usual
        case important
    }
}

extension TodoItem {
    var json: Any {
        get {
            /*
             –í—ã—á–∏—Å–ª–∏–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è json'–∞
             –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TodoItem –≤ —Å–ª–æ–≤–∞—Ä—å, –∑–∞—Ç–µ–º Data, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç JSONSerialization.data(), –≤ Any
             
             [x] –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ json –≤–∞–∂–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ "–æ–±—ã—á–Ω–∞—è"
             [x] –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ json —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (Date)
             [x] –°–æ—Ö—Ä–∞–Ω—è—Ç—å deadline —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
             */
            
            var dict: [String:Any] = [
                "id":self.id,
                "text":self.text,
                "isDone":self.isDone,
                "dateOfCreation":Int(self.dateOfCreation.timeIntervalSince1970)
            ]
            
            if self.importance != .usual {
                dict["importance"] = self.importance.rawValue
            }
            
            if let deadline = self.deadline {
                dict["deadline"] = Int(deadline.timeIntervalSince1970)
            }
            
            if let dateOfChange = self.dateOfChange {
                dict["dateOfChange"] = Int(dateOfChange.timeIntervalSince1970)
            }
            
            return dict
        }
    }
    
    static func parse(json: Any) -> TodoItem? {
        
        /*
         –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ json
         –í—Ö–æ–¥: Any ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã JSONSerialization.jsonObject(with:options:)
         –í—ã—Ö–æ–¥: TodoItem
         "–¢–æ –µ—Å—Ç—å, —Ä–∞–±–æ—Ç—É —Å JSONSerialization –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ ‚Äì —Ç—É–¥–∞, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ parse"
         */
        
        let dict = json as? [String:Any] ?? [:]
        let todoItem = TodoItem(dict: dict)
        
        return todoItem
    }
}

//    var sqlReplaceStatement: String –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –≥–¥–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ CoreData ü§î
